#### Local polynomial smoothing using fixed h
LPSmooth=function(X, Y, p, nu, h.rel, mu.K)
 {n=length(X)     #### Number of observations
################# order the data
ord<-order(X)      #### order the data according to x
X<-X[ord]          #### order the data according to x
Y<-Y[ord]          #### order the data according to x

################# Defining the estimation vector
Ye=(1:n)*0        ###The initial values

############### The main calculation 
h=h.rel*(X[n]-X[1])
for(i in 1:n)
    {X0=X[i]  ### The X point at which to estimate
     Xi=X[abs(X-X0)<h]-X0###Taking the localized and centralized values of X
     Yi=Y[abs(X-X0)<h]   ###Taking the localized values of Y
     u=Xi/h             ###Taking u for the kernel function
     WK=(1-u^2)^mu.K     ###Calculating the weights (standardization not necessary)
    #### Local polynomial based lm
        if(p==0){Ye[i]=sum(WK*Yi)/sum(WK)}
        if(p==1){Ye[i]=lm(Yi~Xi, weights=WK)$coefficients[1+nu]}
        if(p==2){Ye[i]=lm(Yi~Xi+I(Xi^2), weights=WK)$coefficients[1+nu]}
        if(p==3){Ye[i]=lm(Yi~Xi+I(Xi^2)+I(Xi^3), weights=WK)$coefficients[1+nu]}
     }
########## All outputs -- X, Y odered according to X
     results=list(X=X, Y=Y, Ye=Ye, h=h)
   #### output the results  
     drop(results)
 }
